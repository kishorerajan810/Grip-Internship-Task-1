# -*- coding: utf-8 -*-
"""Task 1_ Linear_Regression_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16PSDMQMgiLf2sw_Cz3JNymNqhJnipW0Q

## GRIP - The Sparks Foundation Internship

### Data Science and Business Analytics

###  Author : Kishore Rajan K

### Batch : Gripjun21

### Task 1 : Prediction using supervised ML

### Objective : In this regression task, we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied for 9.25 hrs/day . This is a simple linear regression task as it involves just two variables  .

1. Connect the datasets from google drive to the google colab
"""

from google.colab import drive
drive.mount('/content/drive/')

"""2. Importing all libraries required

"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
# %matplotlib inline

"""3.  Reading data from url link

"""

url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data imported successfully")
data.head(12)

"""4. The shape of dataset 

"""

data.shape

"""5. The types of data"""

data.dtypes

"""6. check the info of data

"""

data.info()

"""7. Check the description of student_score data

"""

data.describe()

"""#Exploratory Data Analysis
## Data Visualization
Now let's plot a graph of our data so that it will give us clear idea about data

Plotting the distribution of scores
"""

data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""we can clearly see that there is a positive linear relation between the number of hours studied and percentage of score.

##Linear Regression ModelÂ¶

Now we prepare the data and split it in test data.
"""

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values  
X_train, X_test, y_train, y_test = train_test_split(X, y,train_size=0.80,test_size=0.20,random_state=42)

"""##Training the model"""

from sklearn.linear_model import LinearRegression
linearRegressor= LinearRegression()
linearRegressor.fit(X_train, y_train)
y_predict= linearRegressor.predict(X_train)

"""##Training the Algorithm"""

regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training the data is complete.")

""" Plotting the regression line

"""

line = regressor.coef_*X+regressor.intercept_
# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')
plt.show()

"""###The accuracy scores for training and test set"""

print('Test Score')
print(regressor.score(X_test, y_test))
print('Training Score')
print(regressor.score(X_train, y_train))

y_test

y_predict

data= pd.DataFrame({'Actual': y_test,'Predicted': y_predict[:5]})
print(data)

"""##Let's predict the score for 9.25 hrs per day

"""

print('Score of student who studied for 9.25 hours a dat', regressor.predict([[9.25]]))

"""## Model Evaluation Metrics"""

mean_squ_error = mean_squared_error(y_test, y_predict[:5])
mean_abs_error = mean_absolute_error(y_test, y_predict[:5])
print("Mean Squred Error:",mean_squ_error)
print("Mean absolute Error:",mean_abs_error)